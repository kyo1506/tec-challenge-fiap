// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TecChallenge.Data.Contexts;

#nullable disable

namespace TecChallenge.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250720221323_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TecChallenge.Domain.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Game_Name");

                    b.ToTable("Game", (string)null);
                });

            modelBuilder.Entity("TecChallenge.Domain.Entities.LibraryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PurchasedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<Guid>("UserLibraryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserLibraryId");

                    b.ToTable("LibraryItem", (string)null);
                });

            modelBuilder.Entity("TecChallenge.Domain.Entities.Log", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationName")
                        .HasColumnType("text");

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("TecChallenge.Domain.Entities.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("TecChallenge.Domain.Entities.PromotionGame", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("DiscountPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromotionGame", (string)null);
                });

            modelBuilder.Entity("TecChallenge.Domain.Entities.UserLibrary", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserLibrary", (string)null);
                });

            modelBuilder.Entity("TecChallenge.Domain.Entities.UserWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserWallet", (string)null);
                });

            modelBuilder.Entity("TecChallenge.Domain.Entities.WalletTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PromotionGameId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PromotionGameId");

                    b.HasIndex("WalletId", "CreatedAt");

                    b.ToTable("WalletTransaction", (string)null);
                });

            modelBuilder.Entity("TecChallenge.Domain.Entities.LibraryItem", b =>
                {
                    b.HasOne("TecChallenge.Domain.Entities.Game", "Game")
                        .WithMany("LibraryItems")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TecChallenge.Domain.Entities.UserLibrary", "UserLibrary")
                        .WithMany("Items")
                        .HasForeignKey("UserLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("UserLibrary");
                });

            modelBuilder.Entity("TecChallenge.Domain.Entities.PromotionGame", b =>
                {
                    b.HasOne("TecChallenge.Domain.Entities.Game", "Game")
                        .WithMany("GamesOnSale")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TecChallenge.Domain.Entities.Promotion", "Promotion")
                        .WithMany("GamesOnSale")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("TecChallenge.Domain.Entities.WalletTransaction", b =>
                {
                    b.HasOne("TecChallenge.Domain.Entities.Game", "Game")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TecChallenge.Domain.Entities.PromotionGame", "PromotionGame")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("PromotionGameId");

                    b.HasOne("TecChallenge.Domain.Entities.UserWallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("PromotionGame");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("TecChallenge.Domain.Entities.Game", b =>
                {
                    b.Navigation("GamesOnSale");

                    b.Navigation("LibraryItems");

                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("TecChallenge.Domain.Entities.Promotion", b =>
                {
                    b.Navigation("GamesOnSale");
                });

            modelBuilder.Entity("TecChallenge.Domain.Entities.PromotionGame", b =>
                {
                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("TecChallenge.Domain.Entities.UserLibrary", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("TecChallenge.Domain.Entities.UserWallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
